========================Ice-Box========================
#Add:
	-- * LICENSE
	-- * Backups method
	-- * Automatic determination of the presence or absence of a database in the system.
	-- depending on the result, create a database (so no need to run db_creator.py before
	-- app.py to overwrite or create a database)
	-- * Encryption for accounts' tasks in db
	-- * Version of the app with GUI. A separate file (appgui.py or guiapp.py) or
	-- command or command line argument for app.py file which brings up an http
	-- server on localhost. You can use the browser to manage tasks and accounts
	-- on the local machine (where the server is running). Use the flask framework
	-- * Tab autocomplete

#Remove:
	-- * 

#Rewrite-or-Change:
	-- * REWRITE THE tools.process_task_or_index (+ rm, (un)done commands code)
	-- * Join task.remove_accounts_tasks and task.remove_accounts_tasks_without_slot 

#Hack-or-Bug:
	-- * Password to create or reset the database.
	-- The hashed password is stored in db_creator.py.
	-- A password is requested at startup db_creator.py and if
	-- the hashes match then call create_db(). It is required
	-- because anyone can reset a db. i can use a buit-in hashlib (sha256)

========================In-Progress========================
@Working-at-the-moment:
	-- * 

========================Nearly-Done-or-Done========================
-- * Store the database in a static dir in the system (/opt/to-do-list-application)
-- * From /opt/to-do-list-application to $HOME/.to-do-list-application
-- * From sqlite to json
-- * Good Documentation
-- * Hash for accounts' passwords in db (hashlib.sha256)

